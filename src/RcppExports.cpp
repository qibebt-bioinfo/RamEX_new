// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// calculateAUCParallel
NumericMatrix calculateAUCParallel(NumericMatrix matrix, IntegerVector group);
RcppExport SEXP _RamEx_calculateAUCParallel(SEXP matrixSEXP, SEXP groupSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type group(groupSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateAUCParallel(matrix, group));
    return rcpp_result_gen;
END_RCPP
}
// calculatePairedMarkersAUC
DataFrame calculatePairedMarkersAUC(NumericMatrix matrix, IntegerVector group, double threshold, int batch_size);
RcppExport SEXP _RamEx_calculatePairedMarkersAUC(SEXP matrixSEXP, SEXP groupSEXP, SEXP thresholdSEXP, SEXP batch_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type group(groupSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type batch_size(batch_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(calculatePairedMarkersAUC(matrix, group, threshold, batch_size));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RamEx_calculateAUCParallel", (DL_FUNC) &_RamEx_calculateAUCParallel, 2},
    {"_RamEx_calculatePairedMarkersAUC", (DL_FUNC) &_RamEx_calculatePairedMarkersAUC, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_RamEx(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
